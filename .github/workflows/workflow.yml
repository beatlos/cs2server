# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Deployment'

on:
#  push:
#    branches: [ "main" ]
  pull_request:
  workflow_dispatch:
    inputs:
      status:
        type: choice
        description: Terraform
        options: 
        - apply
        - destroy

permissions:
  contents: read

jobs:
  terraform:
    env:
      TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    outputs:
      public_ip: ${{ steps.tf_output.outputs.public_ip }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform ${{ github.event.inputs.status }}
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: |
        cd terraform
        terraform ${{ github.event.inputs.status }} -auto-approve -input=false

    - name: Get Terraform Output
      id: tf_output
      run: |
        cd terraform
        public_ip=$(terraform output -json | jq -r ".public_ips.value.ipv4_address")
        echo "$public_ip"
        echo "public_ip=${public_ip}" >> $GITHUB_OUTPUT
   
  ansible:
    name: 'Ansible'
    runs-on: ubuntu-latest
    environment: production
    needs: terraform
    env:
      ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
      ANSIBLE_HOST_KEY_CHECKING: False   
    
    steps:
    - name: Setup Ansible
      run: |
        sudo apt update 
        sudo apt install ansible -y
        ansible --version
        
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup SSH Keys and known_hosts
      env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        mkdir ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519

    - name: Create Inventory File
      env:
        public_ip: ${{ needs.terraform.outputs.public_ip }}
      run: |
        cd ansible
        echo "[all]" > hosts
        echo "$public_ip ansible_user=root ansible_ssh_private_key_file=~/.ssh/id_ed25519" >> hosts

    - name: Run Ansible Playbook
      run: |
        cd ansible
        ansible-playbook -i hosts main.yml -vv      
